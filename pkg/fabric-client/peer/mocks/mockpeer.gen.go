// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/fabric-client/peer/peer.go

package mock_peer

import (
	gomock "github.com/golang/mock/gomock"
	api "github.com/tuxago/fabric-sdk-go/api"
)

// MockProposalProcessor is a mock of ProposalProcessor interface
type MockProposalProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockProposalProcessorMockRecorder
}

// MockProposalProcessorMockRecorder is the mock recorder for MockProposalProcessor
type MockProposalProcessorMockRecorder struct {
	mock *MockProposalProcessor
}

// NewMockProposalProcessor creates a new mock instance
func NewMockProposalProcessor(ctrl *gomock.Controller) *MockProposalProcessor {
	mock := &MockProposalProcessor{ctrl: ctrl}
	mock.recorder = &MockProposalProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockProposalProcessor) EXPECT() *MockProposalProcessorMockRecorder {
	return _m.recorder
}

// ProcessProposal mocks base method
func (_m *MockProposalProcessor) ProcessProposal(proposal *api.TransactionProposal) (*api.TransactionProposalResponse, error) {
	ret := _m.ctrl.Call(_m, "ProcessProposal", proposal)
	ret0, _ := ret[0].(*api.TransactionProposalResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessProposal indicates an expected call of ProcessProposal
func (_mr *MockProposalProcessorMockRecorder) ProcessProposal(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ProcessProposal", arg0)
}
